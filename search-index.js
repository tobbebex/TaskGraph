var searchIndex = {};
searchIndex['task_graph'] = {"items":[[0,"","task_graph","",null,null],[0,"scheduler","","",null,null],[3,"SequentialScheduler","task_graph::scheduler","Scheduler that immediatly runs the function in the same thread",null,null],[3,"SpawningScheduler","","Scheduler that spawns a new OS thread for each scheduled function",null,null],[3,"TestScheduler","","Scheduler that queues all scheduled functions to allow for inspection and later running them in a controlled manner, e.g. in tests",null,null],[8,"Scheduler","","Trait used for generic scheduling of work",null,null],[10,"schedule","","Schedule `f` to be run as soon as possible by this scheduler.",0,{"inputs":[{"name":"scheduler"},{"name":"f"}],"output":null}],[11,"clone","","",1,{"inputs":[{"name":"sequentialscheduler"}],"output":{"name":"sequentialscheduler"}}],[11,"clone","","",2,{"inputs":[{"name":"spawningscheduler"}],"output":{"name":"spawningscheduler"}}],[11,"clone","","",3,{"inputs":[{"name":"testscheduler"}],"output":{"name":"testscheduler"}}],[11,"new","","Creates a new test scheduler with its own queue",3,{"inputs":[{"name":"testscheduler"}],"output":{"name":"testscheduler"}}],[11,"queued_count","","Current count of functions that has been scheduled since creation or last call to `run_queued`",3,{"inputs":[{"name":"testscheduler"}],"output":{"name":"usize"}}],[11,"run_queued","","Run all queued functions.",3,{"inputs":[{"name":"testscheduler"}],"output":null}],[11,"run_queued_recursive","","Run all queued functions, and functions queued by that, recursively",3,{"inputs":[{"name":"testscheduler"}],"output":null}],[11,"schedule","","Immediatly run `f` in the current thread",1,{"inputs":[{"name":"sequentialscheduler"},{"name":"f"}],"output":null}],[11,"schedule","","Spawn a new (detached) thread that runs `f`",2,{"inputs":[{"name":"spawningscheduler"},{"name":"f"}],"output":null}],[11,"schedule","","Queue the function to be run later when `run_queued` is called",3,{"inputs":[{"name":"testscheduler"},{"name":"f"}],"output":null}],[11,"schedule","alloc::arc","Execute `f` on the task pool",4,{"inputs":[{"name":"arc"},{"name":"f"}],"output":null}],[0,"task","task_graph","",null,null],[3,"Task","task_graph::task","A computation that eventually will produce a value that other tasks can depend on.",null,null],[8,"Join","","Trait for joining tasks in `Vec<Task<A>>`",null,null],[10,"join_all","","Create a task that contains all the results of the input tasks",5,{"inputs":[{"name":"join"}],"output":{"name":"task"}}],[10,"join_any","","Create a task that contains one of the results of the input tasks",5,{"inputs":[{"name":"join"}],"output":{"name":"task"}}],[11,"from_value","","Create a finished task from a value",6,{"inputs":[{"name":"task"},{"name":"a"}],"output":{"name":"task"}}],[11,"from_fn","","Create a task from a function that will be scheduled to run in `sched`.",6,{"inputs":[{"name":"task"},{"name":"s"},{"name":"f"}],"output":{"name":"task"}}],[11,"never","","Create a task that never finishes",6,{"inputs":[{"name":"task"}],"output":{"name":"task"}}],[11,"then","","Create a task that is a continuation from this task",6,{"inputs":[{"name":"task"},{"name":"s"},{"name":"f"}],"output":{"name":"task"}}],[11,"then_forget","","Run a function as a continuation from this task, but don't return it in a task",6,{"inputs":[{"name":"task"},{"name":"s"},{"name":"f"}],"output":null}],[11,"join","","Create a task that contains the result of this and another task.",6,{"inputs":[{"name":"task"},{"name":"task"}],"output":{"name":"task"}}],[11,"into_future","","Turn this task into a future, from which the result can be retrieved",6,{"inputs":[{"name":"task"}],"output":{"name":"future"}}],[11,"is_done","","Returns if this task has finished",6,{"inputs":[{"name":"task"}],"output":{"name":"bool"}}],[11,"clone","","Clones the task into another task that contains a clone of the original tasks value when the original task completes",6,{"inputs":[{"name":"task"}],"output":{"name":"task"}}],[11,"arc","","",6,{"inputs":[{"name":"task"}],"output":{"name":"task"}}],[11,"unwrap","","Retrieve the value from the inner task",6,{"inputs":[{"name":"task"}],"output":{"name":"task"}}],[11,"for_each","","",6,{"inputs":[{"name":"task"},{"name":"s"},{"name":"f"}],"output":{"name":"task"}}],[11,"join_all","collections::vec","",7,{"inputs":[{"name":"vec"}],"output":{"name":"task"}}],[11,"join_any","","",7,{"inputs":[{"name":"vec"}],"output":{"name":"task"}}]],"paths":[[8,"Scheduler"],[3,"SequentialScheduler"],[3,"SpawningScheduler"],[3,"TestScheduler"],[3,"Arc"],[8,"Join"],[3,"Task"],[3,"Vec"]]};
initSearch(searchIndex);
